plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
}
apply plugin: 'jacoco'


jacoco {
    toolVersion = "0.8.7"
    reportsDirectory.set(layout.buildDirectory.dir("jacoco"))
    //reportsDir = file("$buildDir/reports/jacoco/")

}

tasks.withType(Test) {
    jacoco.includeNoLocationClasses = true
}



task jacocoTestReport(type: JacocoReport, dependsOn: ['testDebugUnitTest' /*, 'createDebugCoverageReport'*/]) {

    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    reports {
        csv.enabled false
        html.enabled true
        xml.enabled false
       // html.destination file("${buildDir}/reports/jacoco/html/androidUnitTest")
       // html.stylesheetPath 'jacoco-custom.css' // Custom CSS for report beautification
    }


    def fileFilter = ['jdk.internal.*','**/R.class',
                      '**/R$*.class',
                      '**/R.styleable',
                      '**/BuildConfig.*',
                      '**/Manifest*.*',
                      '**/*Test*.*',
                      'android/**/*.*',
                      '**/androidx/**',
                      '**/androidx/**/*.class',
                      'androidx/**/*.*',
                      'src//java/com/ohmp/unittestcases/MainActivity.class',
                      '**/MainActivity.*',"**/generated/**", "**/other-excluded/**"
    ]
    def debugTree = fileTree(dir: "${buildDir}/intermediates/compile_app_classes_jar/debug",excludes : fileFilter)   //, excludes: fileFilter
    def mainSrc = "${project.projectDir}/src/main/java"

   // sourceDirectories.setFrom(files([mainSrc]))
    classDirectories.setFrom(files([debugTree]))

//    afterEvaluate {
//        print(getClassDirectories().+"om prakash line 2")
//        getClassDirectories().setFrom(classDirectories.files.collect {
//            fileTree(dir: it, exclude: fileFilter)
//        })
//    }

    executionData.setFrom(fileTree(dir: "$buildDir", includes: [
            "jacoco/testDebugUnitTest.exec"
            //"outputs/unit_test_code_coverage/debugUnitTest/testDebugUnitTest.exec"
            //, "outputs/code-coverage/connected/*coverage.ec"
    ]))



}


task jacocoTestCoverageVerification(type: JacocoCoverageVerification, dependsOn: 'jacocoTestReport') {

    group = "Reporting"
    description = "Generate Jacoco coverage reports"

    violationRules {
        failOnViolation = true
        rule {

            rule {
                limit {
                    minimum = 0.8
                }
            }

            rule {
                enabled = true
                element = 'CLASS'
                includes = ['org.gradle.*']

                limit {
                    counter = 'LINE'
                    value = 'TOTALCOUNT'
                    maximum = 0.3
                }
            }

//            rule {
//                limit {
//                    counter = 'LINE'
//                    minimum = 1
//                }
//                limit {
//                    counter = 'BRANCH'
//                    minimum = 1
//                }
//                limit {
//                    counter = 'COMPLEXITY'
//                    minimum = 1
//                }
//            }
        }
    }
}

task getCoverage(type: Exec, dependsOn: 'jacocoTestCoverageVerification') {
    group = "Reporting"
    commandLine "open", "$buildDir/jacoco/jacocoTestReport/html/index.html"
}

android {
    namespace 'com.ohmp.unittestcases'
    compileSdk 33

    defaultConfig {
        applicationId "com.ohmp.unittestcases"
        minSdk 24
        targetSdk 33
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
              testCoverageEnabled = false
            //  enableUnitTestCoverage true

        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    testOptions {
        unitTests.all {
            jacoco {
                // Enable JaCoCo for unit tests
                enabled = true
                includeNoLocationClasses = false // Include classes with no source file location
            }
        }
    }
}





dependencies {

    implementation 'androidx.core:core-ktx:1.7.0'
    implementation 'androidx.appcompat:appcompat:1.6.1'
    implementation 'com.google.android.material:material:1.6.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.5'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.5.1'

    testImplementation 'org.mockito:mockito-core:2.19.0'
//    testImplementation "org.jacoco:org.jacoco.agent:0.8.4"

}